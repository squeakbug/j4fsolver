module LibSolver.Search.SearchState
    ( SearchState
    ) where

-- Типаж представителя пространства состояний
class (Eq a, Ord a) => SearchState a where
    produce :: a -> [a]

instance SearchState Int where
    produce = (:[]) . (+1)

-- QUESTION: В каких системах операции 'сравнить два состояния' и 'определить, является ли данное состояние конечным' имеют разные стоимости

-- TODO: Привести реализации типажа для часто встречаемых объектов:
-- 1) преставители группы перестановок
-- 2) массивы с постоянным количеством пропусков (пятнашки)
-- 3) массивы с уменьшающимся после применения метода `produce` количеством пропусков (судоку)
-- 4) массивы с недетерминированым количеством пропусков (с заданной вероятностью увеличение или уменьшение)
-- 5) конечные автоматы (лексеры, протоколы взаимодействия конечного числа акторов)
-- 6) автоматы с магазинной памятью (парсеры КС-грамматик)
-- 7) тьюринг-полные вычислители (алгоритмы, символьное исполнение)

-- ?) reward model
-- ?) система с подсказками (подсказки не используются при построении графа, но используются при поиске в пространстве состояний)
-- ?) система с возможностью пройти одно и то же состояние в процессе поиска конечное число раз
 
-- Типаж представителя пространства состояний со взвешанными дугами
-- class (PartialEq a, Ord a) => WeightedSeachState a where
--    produce :: a -> [(Int, a)]

-- TODO: цена дуги явно определяется не только текущей вершиной, но и правилами пространства:
